---
import { Astronav } from "astro-navbar";
import LanguageSwitcher from "./LanguageSwitcher.astro";
import { loadTranslations, type Language } from '../../i18n/utils';
import { getLanguageFromPath, createLocalizedPath } from '../../i18n/utils';

export interface Props {
  currentLanguage?: Language;
  currentPath?: string;
}

const { currentLanguage = 'ja', currentPath = '/' } = Astro.props;
const translations = await loadTranslations(currentLanguage);

const menuitems = [
  { href: createLocalizedPath('/#service-overview', currentLanguage), label: translations.nav.services },
  { href: createLocalizedPath('/#pricing', currentLanguage), label: translations.nav.pricing },
  { href: createLocalizedPath('/#solutions', currentLanguage), label: translations.nav.solutions },
  { href: createLocalizedPath('/#industries', currentLanguage), label: translations.nav.industries },
  { href: createLocalizedPath('/#cases', currentLanguage), label: translations.nav.cases },
  { href: createLocalizedPath('/#faq', currentLanguage), label: translations.nav.faq },
];

---

<div class="mt-20">
  <nav class="w-full top-0 left-0 z-50 fixed bg-white">
    <header class="flex flex-col lg:flex-row justify-between items-center my-6 px-6 md:px-32 py-4">
      <Astronav>
        <div class="flex w-full lg:w-auto items-center justify-between">
          <a href={createLocalizedPath("/", currentLanguage)} class="flex items-center space-x-3 rtl:space-x-reverse">
            <img src="/iotrealm.png" class="h-20" alt="Logo" />
            <span class="text-3xl font-bold text-green-600 tracking-tight font-sans">IoTRealm</span>
          </a>
          <div class="block lg:hidden">
            <div id="menu-icon" class="w-8 h-8 text-black cursor-pointer">
              <!-- Open (hamburger) icon -->
              <svg id="open-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="w-8 h-8">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
              </svg>
              <!-- Close (X) icon -->
              <svg id="close-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="w-8 h-8 hidden">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </div>
          </div>
        </div>
        
        <nav class="hidden w-full lg:w-auto mt-2 lg:flex lg:mt-0" id="menu-items">
          <ul class="font-medium flex flex-col p-4 lg:p-0 mt-4 border rounded-lg lg:flex-row lg:space-x-12 lg:mt-0 lg:border-0 bg-white lg:bg-transparent shadow-lg lg:shadow-none">
            {menuitems.map((item) => (
              <li>
                <a 
                  href={item.href} 
                  class="mobile-nav-link block py-3 px-4 text-black rounded lg:bg-transparent lg:p-0 text-lg font-semibold"
                  data-close-menu="true"
                >
                  {item.label}
                </a>
              </li>
            ))}
            <!-- Mobile Language Switcher -->
            <li class="lg:hidden mt-4 pt-4 border-t border-gray-300">
              <div class="px-4 py-3 bg-gray-50 rounded-lg">
                <label class="block text-sm font-semibold text-gray-800 mb-3">
                  {translations.nav.language}
                </label>
                <LanguageSwitcher currentLanguage={currentLanguage} currentPath={currentPath} />
              </div>
            </li>
          </ul>
        </nav>
      </Astronav>

      <div>
        <div class="hidden lg:flex items-center gap-4">
          <LanguageSwitcher currentLanguage={currentLanguage} currentPath={currentPath} />
        </div>
      </div>
    </header>
  </nav>
</div>

<script is:inline>
  // Get references to the menu icon, open/close icons, and menu items
  const menuIcon = document.getElementById('menu-icon');
  const openIcon = document.getElementById('open-icon');
  const closeIcon = document.getElementById('close-icon');
  const menuItems = document.getElementById('menu-items');
  const closeMenuItems = document.querySelectorAll('[data-close-menu="true"]');  // Select all items with the 'data-close-menu' attribute

  // Toggle the menu visibility and icon when the menu icon is clicked
  menuIcon.addEventListener('click', () => {
    menuItems.classList.toggle('hidden');  // Toggle the 'hidden' class on the menu

    // Toggle between open and close icons
    openIcon.classList.toggle('hidden');
    closeIcon.classList.toggle('hidden');
  });

  // Close the menu when any item is clicked
  closeMenuItems.forEach(item => {
    item.addEventListener('click', () => {
      menuItems.classList.add('hidden');  // Add the 'hidden' class to hide the menu
      openIcon.classList.remove('hidden');  // Show the open (hamburger) icon
      closeIcon.classList.add('hidden');  // Hide the close (X) icon
    });
  });
</script>